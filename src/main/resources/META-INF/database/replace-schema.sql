SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Tables */

DROP TABLE IF EXISTS NIHONSHU_BRAND;
DROP TABLE IF EXISTS BRAND;
DROP TABLE IF EXISTS BREWERY;
DROP TABLE IF EXISTS CLS_MOTO;
DROP TABLE IF EXISTS CLS_NIHONSHU_HIIRE;
DROP TABLE IF EXISTS CLS_NIHONSHU_JOSO;
DROP TABLE IF EXISTS CLS_NIHONSHU_TYPE;
DROP TABLE IF EXISTS CLS_STATUS;
DROP TABLE IF EXISTS MEMBER;




/* Create Tables */

-- 最上位の分類。
-- 酒そのものの銘柄を表す。分類を持つので、同じ十四代でも日本酒の十四代と焼酎の十四代は別レコードになる。
CREATE TABLE BRAND
(
	BRAND_ID int NOT NULL AUTO_INCREMENT COMMENT '銘柄ID',
	BREWERY_ID int NOT NULL COMMENT '蔵元ID',
	BRAND_NAME varchar(50) NOT NULL COMMENT 'ブランド名',
	BRAND_NAME_KANA varchar(255) NOT NULL COMMENT '銘柄名（かな）',
	PB_FLG boolean NOT NULL COMMENT 'プライベートブランドフラグ',
	NOTE text COMMENT 'ノート',
	STATUS_CODE char(3) NOT NULL COMMENT 'ステータスコード',
	VERSION_NO bigint NOT NULL COMMENT 'バージョン番号',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (BRAND_ID)
) COMMENT = '銘柄 : 最上位の分類。
酒そのものの銘柄を表す。分類を持つので、同じ十四代でも日本酒の十四代と焼酎の十四代は別レコードになる。';


-- 蔵元の基本情報。
-- 名前から所在地、いつできて、いつ終わったかなどなど。
CREATE TABLE BREWERY
(
	BREWERY_ID int NOT NULL AUTO_INCREMENT COMMENT '蔵元ID',
	BREWERY_NAME varchar(255) NOT NULL COMMENT '蔵元名',
	BREWERY_NAME_KANA varchar(255) NOT NULL COMMENT '蔵元名（かな）',
	NOTE text COMMENT 'ノート',
	URL varchar(255) COMMENT 'ホームページ',
	ADDRESS varchar(400) NOT NULL COMMENT '住所',
	FOUNDED_YEAR int COMMENT '創業（年）',
	ESTABLISHED_DATE date COMMENT '設立年月日',
	DEFUNCT_DATE date COMMENT '解散日',
	STATUS_CODE char(3) NOT NULL COMMENT 'ステータスコード',
	VERSION_NO bigint NOT NULL COMMENT 'バージョン番号',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (BREWERY_ID)
) COMMENT = '蔵元 : 蔵元の基本情報。
名前から所在地、いつできて、いつ終わったかなどなど。';


-- 生酛、山廃、速醸、、など酵母の種類について
CREATE TABLE CLS_MOTO
(
	MOTO_CODE varchar(10) NOT NULL COMMENT '酛コード',
	MOTO_NAME varchar(50) NOT NULL COMMENT '酛コード名',
	DESCRIPTION varchar(255) NOT NULL COMMENT '説明',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (MOTO_CODE)
) COMMENT = '[区分値] 酛 : 生酛、山廃、速醸、、など酵母の種類について';


-- 生酒、生詰、生貯蔵、、など
-- 
-- TODO: ひやおろしとか、夏越し酒とか、生詰めの別名とかどうするか
CREATE TABLE CLS_NIHONSHU_HIIRE
(
	NIHONSHU_HIIRE_CODE varchar(10) NOT NULL COMMENT '日本酒火入れコード',
	NIHONSHU_HIIRE_NAME varchar(50) NOT NULL COMMENT '日本酒火入れコード名',
	DESCRIPTION varchar(255) NOT NULL COMMENT '説明',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (NIHONSHU_HIIRE_CODE)
) COMMENT = '[区分値] 火入れ : 生酒、生詰、生貯蔵、、など

TODO: ひやおろしとか、夏越し酒とか、生詰めの別名とかどうするか';


-- 荒走り、中取り、責め、、など
CREATE TABLE CLS_NIHONSHU_JOSO
(
	NIHONSHU_JOSO_CODE varchar(10) NOT NULL COMMENT '日本酒上槽コード',
	NIHONSHU_JOSO_NAME varchar(50) NOT NULL COMMENT '日本酒上槽コード名',
	DESCRIPTION varchar(255) NOT NULL COMMENT '説明',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (NIHONSHU_JOSO_CODE)
) COMMENT = '[区分値] 日本酒上槽 : 荒走り、中取り、責め、、など';


-- 本醸造、純米、吟醸、純米吟醸、大吟醸、、など。
-- 
-- TODO: 普通酒も入れてるけど、分けたほうがいいか。もしくは区別するなにかが必要か。増醸酒は無視でいいか。
CREATE TABLE CLS_NIHONSHU_TYPE
(
	NIHONSHU_TYPE_CODE varchar(10) NOT NULL COMMENT '日本酒分類コード',
	NIHONSHU_TYPE_NAME varchar(50) NOT NULL COMMENT '日本酒分類コード名',
	DESCRIPTION varchar(255) NOT NULL COMMENT '説明',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (NIHONSHU_TYPE_CODE)
) COMMENT = '[区分値] 日本酒分類 : 本醸造、純米、吟醸、純米吟醸、大吟醸、、など。

TODO: 普通酒も入れてるけど、分けたほうがいいか。もしくは区別するなにかが必要か。増醸酒は無視でいいか。';


-- レコードの状態を表す値を管理するテーブル。
-- テーブルの種類に関係なく、レコードが「削除」など状態を表すために使用する。
CREATE TABLE CLS_STATUS
(
	STATUS_CODE char(3) NOT NULL UNIQUE COMMENT 'ステータスコード',
	STATUS_NAME varchar(50) NOT NULL COMMENT 'ステータスコード名',
	DESCRIPTION varchar(255) NOT NULL COMMENT '説明',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (STATUS_CODE)
) COMMENT = '[区分値] ステータス : レコードの状態を表す値を管理するテーブル。
テーブルの種類に関係なく、レコードが「削除」など状態を表すために使用する。';


CREATE TABLE MEMBER
(
	MEMBER_ID int NOT NULL AUTO_INCREMENT COMMENT '会員ID',
	MEMBER_NAME varchar(128) NOT NULL COMMENT '会員名',
	EMAIL varchar(255) NOT NULL COMMENT 'メールアドレス',
	-- SHA-256
	PASSWORD varchar(64) NOT NULL COMMENT 'パスワード : SHA-256',
	STATUS_CODE char(3) NOT NULL COMMENT 'ステータスコード',
	VERSION_NO bigint NOT NULL COMMENT 'バージョン番号',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (MEMBER_ID)
) COMMENT = '会員 : つまり利用する人たち';


-- 日本酒の銘柄について、
-- 「飛喜露」なら「飛露喜 純米吟醸 愛山」のようなレベルで、飲むレベルで同じものを。
-- 見た目（瓶や容量）までの違いは日本酒銘柄詳細のほうにもつ。
CREATE TABLE NIHONSHU_BRAND
(
	NIHONSHU_BRAND_ID int NOT NULL AUTO_INCREMENT COMMENT '日本酒銘柄ID',
	BRAND_ID int NOT NULL COMMENT '銘柄ID',
	NIHONSHU_BRAND_NAME varchar(50) NOT NULL COMMENT '日本酒銘柄名',
	NIHONSHU_BRAND_NAME_KANA varchar(255) NOT NULL COMMENT '日本酒銘柄名カナ',
	MOTO_CODE varchar(10) NOT NULL COMMENT '酛コード',
	NIHONSHU_HIIRE_CODE varchar(10) NOT NULL COMMENT '日本酒火入れコード',
	NIHONSHU_JOSO_CODE varchar(10) NOT NULL COMMENT '日本酒上槽コード',
	NIHONSHU_TYPE_CODE varchar(10) NOT NULL COMMENT '日本酒分類コード',
	GENSHU_FLG boolean NOT NULL COMMENT '原酒フラグ',
	STATUS_CODE char(3) NOT NULL COMMENT 'ステータスコード',
	VERSION_NO bigint NOT NULL COMMENT 'バージョン番号',
	DISPLAY_ORDER int NOT NULL COMMENT '整列順序',
	REGISTER_DATETIME datetime NOT NULL COMMENT '作成日時',
	REGISTER_TRACE varchar(64) NOT NULL COMMENT '作成トレース',
	UPDATE_DATETIME datetime NOT NULL COMMENT '最終更新日時',
	UPDATE_TRACE varchar(64) NOT NULL COMMENT '更新トレース',
	PRIMARY KEY (NIHONSHU_BRAND_ID)
) COMMENT = '日本酒銘柄 : 日本酒の銘柄について、
「飛喜露」なら「飛露喜 純米吟醸 愛山」のようなレベルで、飲むレベルで同じものを。
見た目（瓶や容量）までの違いは日本酒銘柄詳細のほうにもつ。';



/* Create Foreign Keys */

ALTER TABLE NIHONSHU_BRAND
	ADD CONSTRAINT FK_NIHONSHU_BRAND_BRAND FOREIGN KEY (BRAND_ID)
	REFERENCES BRAND (BRAND_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BRAND
	ADD CONSTRAINT FK_BRAND_BREWERY FOREIGN KEY (BREWERY_ID)
	REFERENCES BREWERY (BREWERY_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NIHONSHU_BRAND
	ADD CONSTRAINT FK_NIHONSHU_BRAND_CLS_MOTO FOREIGN KEY (MOTO_CODE)
	REFERENCES CLS_MOTO (MOTO_CODE)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NIHONSHU_BRAND
	ADD CONSTRAINT FK_NIHONSHU_BRAND_CLS_NIHONSHU_HIIRE FOREIGN KEY (NIHONSHU_HIIRE_CODE)
	REFERENCES CLS_NIHONSHU_HIIRE (NIHONSHU_HIIRE_CODE)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NIHONSHU_BRAND
	ADD CONSTRAINT FK_NIHONSHU_BRAND_CLS_NIHONSHU_JOSO FOREIGN KEY (NIHONSHU_JOSO_CODE)
	REFERENCES CLS_NIHONSHU_JOSO (NIHONSHU_JOSO_CODE)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NIHONSHU_BRAND
	ADD CONSTRAINT FK_NIHONSHU_BRAND_CLS_NIHONSHU_TYPE FOREIGN KEY (NIHONSHU_TYPE_CODE)
	REFERENCES CLS_NIHONSHU_TYPE (NIHONSHU_TYPE_CODE)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



